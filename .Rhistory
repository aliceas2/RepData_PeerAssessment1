separate(data = res, col= sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
?parse_number
library(swirl)
swirl()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed<- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
library(swirl)
ls()
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col =="blue")
boxplot(ppm, col ="blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm,col="green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(ppm ~ region, col = "red")
boxplot(pollution, ppm ~ region, col = "red")
boxplot(pollution, col = "red")
boxplot(pm25~region, col = "red")
boxplot(pollution, pm25~region, col = "red")
?boxplot
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=(2,1),mar=c(4,4,2,1))
par(mfrow=(2,1),mar=c(4,4,2,1)))
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west"), west$pm25, col = "green")
hist(west$pm25, col = "green")
hist(west = subset(pollution, region == "west"), $pm25, col = "green")
hist(west = subset(pollution, region == "west"), west$pm25, col = "green")
hist(west <- subset(pollution, region == "west"), west$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude~pm25))
with(pollution, plot(latitude,pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrpw = c(1,2) , mar = c(5,4,2,1))
par(mfrow = c(1,2) , mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
faithful
(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region , data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region , data = state, layout = c(2,2))
head(mpg)
dim(pmg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, dat = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
bpxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot())
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par(length)
length(par)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type = "n", airquality$Ozone)
title("Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, Month == 5)
with(may, plot(wind, ozone, pch = 4, col = "blue"))
with(may, plot(Wind, Ozone, pch = 4, col = "blue"))
with(may, plot(Wind, Ozone, pch = 17, col = "blue"))
points(may$Wind, may$Ozone, pch = 17, col = "blue"))
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month !=5)
points(notmay$Wind, notmay$ozone, col="red")
points(notmay$Wind, notmay$ozone, col="red", pch=8)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch = c(17,8), col = c("blue","red0"), legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
ls()
rm(ls())
rm.ls()
rm(list = ls())
clear()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",df)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",file = df)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",file = "df")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = "df")
my_df <- data.frame(df)
head(my_df)
df
getwd()
selected$Datetime <- as.POSIXct(sFile)
## Plot 1
hist(selected$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
plot1()
source('~/plot1.R')
source('~/Plot2.R')
source('~/Plot2.R')
source('~/Plot2.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot4.R')
source('~/Plot3.R')
source('~/Plot2.R')
source('~/plot1.R')
source('~/.active-rstudio-document')
source('~/test.R')
source('~/test.R')
source('~/Plot3.R')
source('~/Plot3.R')
source('~/Plot4.R')
library(swirl)
ls()
rm(list = ls())
swirl()
head(airquality)
xyplot(ozone~wind, data = airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local == TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R",local = TRUE))
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p2 <- colorRampPalette(c("blue","green"), alpha = 0.5)
p2 <- colorRampPalette(c("blue","green"), alpha = .5)
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5,.5))
plot(x, y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(colcano, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
x <- c(-25,340,250,440,115)
class(x)
var(x)
x
heights <- c(-25,340,250,440,115)
var(heights)*(length(heights)-1)/length(heights)
x <- (6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
x <- c(6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
sd(x)
heights <- (6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
heights <- c(6.7,2.7,2.5,3.6,3.4,4.1,4.8,5.9,8.3)
sd(heights)*(length(heights)-1)/length(heights)
sd(heights)
heights <- c(-25,340,250,440,115)
sd(heights)
mean(x)
sd(x)
x <- c(165,175,176,159,170)
mean(x)
median(x)
sd(heights)*(length(heights)-1)/length(heights)
head(cars)
cars
mtcast
mtcars
class(mtcars)
write.csv(mtcars, "mtcars.csv")
source('~/GitHub/PM2.5-Emissions/Plot1.R')
library(knitr)
install.packages("knitr")
install.packages("slidify")
install.packages("devtools")
install_github('slidify', 'ramnathv')
install.packages("githubinstall")
install_github('slidify', 'ramnathv')
library(githubinstall)
install_github('slidify', 'ramnathv')
?githubinstall
githubinstall('slidify', 'ramnathv')
githubinstall('slidify', 'ramnathv')
githubinstall('slidify', 'ramnathv')
githubinstall('slidify')
githubinstall('slidify')
source('~/GitHub/RepData_PeerAssessment1/script.R')
getwd()
setwd("C:/Users/astanfor2192/Documents/GitHub/RepData_PeerAssessment1")
getwd()
source('~/GitHub/RepData_PeerAssessment1/script.R')
count <- is.na(summary)
dim(count)
head(count)
sum(is.na(summary))
head(interval_plot)
class(interval_plot)
interval_plot
interval_plot[2320]
interval_plot[,2320]
interval_plot[2320,]
interval_plot[1]
interval_plot[5]
interval_plot[471]
interval_plot[467]
interval_plot[40]
class(interval_plot)
to.data.frame(interval_plot)
test <- as.data.frame.table(interval_plot)
head(test)
test <- colnames(c("interval","steps"))
mean(test$steps)
mean(na.omit(test$steps))
tail(test$steps)
test
test <- as.data.frame.table(interval_plot)
tail(test)
colnames <- c("interval", "steps")
colnames(test)
colnames(test) <- colnames
head(test)
interval_plot
test
sum(test$interval)
sum(test$interval, na.rm = TRUE)
sum(omit.na(test$interval))
sum(na.omit(test$interval))
sum(summary$steps)
sum(na.omit(summary$steps))
mean(na.omit(summary$steps))
mean(na.omit(test$steps))
summary[,"2355"]
head(interval_plot)
head(test)
head(summary)
summary$mean_int <- test$steps
head(summary)
summary_test <- summary
summary_test[is.na(steps)] <- summary$mean_int
summary_test[is.na(steps),] <- summary$mean_int
head(summary_test)
summary[, 1][is.na(summary[, 1])] <- summary[,4]
summary[, 1][is.na(summary[, 1])] <- 0
head(summary)
tail(summary)
summary
summary2
summary_test
summary[80,]
source('~/GitHub/RepData_PeerAssessment1/script.R')
tail(summary)
tail(summary_test)
summary_na_free <- merge(summary,interval,by=c("interval"))
head(summary_na_free)
head(interval)
head(summary)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(summary_na_free)
head(summary)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(summary_na_free)
tail(summary_na_free)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(summary_na_free)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(summary_na_free)
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
by_date_na <- aggregate(summary_na_free$steps,by=list((substr(summary_na_free$date,1,53))),sum, na.rm = TRUE)
colnames(by_date_na)<-c("date","steps")
head(by_date_na)
mean(by_date_na$steps)
median(by_date_na$steps)
median(by_date$steps)
mean(by_date$steps)
weekday <- as.Date(summary_na_free$date)
weekday
?isWeekday
weekday$day <- weekdays(as.Date(weekday$date))
weekday$day <- weekdays(as.Date(weekday))
weekday <- weekdays(as.Date(weekday))
class(weekday)
class(weekday[1])
dow <- function(x) format(as.Date(x), "%A")
df$day <- dow(summary_na_free$date)
df <- df$day <- dow(summary_na_free$date)
class(Df)
class(df)
dfat$day <- dow(summary_na_free$date)
as.data.frame(dfat)
dfat <- as.data.frame(dow(summary_na_free$date))
head(dfat)
dfat$date <- summary_na_free$date
head(dfat)
colnames(dfat) <- c("day","date")
head(dfat)
dfat$weekday
dfat(head)
head(dfat)
dfat <- as.data.frame(as.numeric(dow(summary_na_free$date)))
head(dfat)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(dfat)
dfat$date <- summary_na_free$date
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
class(dfat$`dow(summary_na_free$date)`)
head(dfat)
?dow
colnames(dfat) <- c("day","date")
dfat$day <- as.character(dfat$day)
class(dfat$day)
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(dfat)
library(chron)
install.packages("chron")
library(chron)
head(summary_na_free)
summary_na_free$is_weekend <- is.weekend(summary_na_free[, 3])
head(summary_na_free)
tail(summary_na_free)
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
head(summary_na_free)
levels(summary_na_free$is_weekend)
levels(summary_na_free$is_weekend) <- list(weekend = TRUE, weekday = FALSE)
levels(summary_na_free$is_weekend)
head(summary_na_free)
weekend_plot <- aggregate(summary_na_free$steps,
list(as.numeric(summary_na_free$interval),
summary_na_free$is_weekend), FUN = "mean")
head(weekend_plot)
colnames(weekend_plot) <- c("Interval","day_type","step_avg")
head(weekend_plot)
source('~/GitHub/RepData_PeerAssessment1/script.R')
library(lattice)
xyplot(weekend_plot$step_avg ~ weekend_plot$interval | weekend_plot$day_type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
xyplot(weekend_plot$step_avg ~ weekend_plot$interval | weekend_plot$day_type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps", na.omit = TRUE)
?xyplot
source('~/GitHub/RepData_PeerAssessment1/script.R')
xyplot(weekend_plot$step_avg ~ weekend_plot$interval | weekend_plot$day_type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps", na.omit = TRUE)
na.omit(weekend_plot)
dim(weekend_plot)
dim(na.omit(weekend_plot))
head(weekend_plot)
xyplot(weekend_plot$step_avg ~ weekend_plot$Interval | weekend_plot$day_type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps", na.omit = TRUE)
xyplot(weekend_plot$step_avg ~ weekend_plot$Interval | weekend_plot$day_type,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
source('~/GitHub/RepData_PeerAssessment1/script.R')
